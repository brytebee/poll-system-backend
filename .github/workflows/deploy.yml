# .github/workflows/deploy.yml
name: Deploy NexusPolls to DigitalOcean

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  APP_NAME: nexuspolls

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_nexuspolls
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/base.txt') }}

      - name: ⬇️ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install coverage pytest-django

      - name: 🗄️ Run migrations
        env:
          DJANGO_SETTINGS_MODULE: poll_system.settings.production
          ENV: test
          DEBUG: False
          DB_NAME: test_nexuspolls
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci-cd-pipeline-testing
          ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py migrate

      - name: 🧪 Run tests with coverage
        env:
          DJANGO_SETTINGS_MODULE: poll_system.settings.base
          ENV: test
          DEBUG: False
          DB_NAME: test_nexuspolls
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci-cd-pipeline-testing
          ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          coverage run --source='.' manage.py test
          coverage report --show-missing
          coverage xml

      - name: 🔒 Security check
        run: |
          pip install bandit safety
          bandit -r . -x tests/ -ll || true
          safety check --ignore 70612 || true

      - name: ✅ Test summary
        run: |
          echo "🎉 All tests passed!"
          echo "📊 Coverage report generated"
          echo "🔒 Security checks completed"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to DigitalOcean
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            echo "🚀 Starting deployment of NexusPolls..."

            cd /opt/nexuspolls

            # Pull latest code
            echo "📥 Pulling latest code..."
            git pull origin main

            # Update environment variables for local database setup
            echo "⚙️ Updating environment..."
            cat > .env << EOF
            ENV=prod
            DEBUG=False
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ALLOWED_HOSTS=localhost,127.0.0.1,web,0.0.0.0,134.209.171.141,*.ngrok.io,*.ngrok-free.app,15b04f5013ba.ngrok-free.app
            CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:3001,http://127.0.0.1:8000,http://localhost:8000,http://134.209.171.141:8000,https://15b04f5013ba.ngrok-free.app
            CORS_ALLOWED_ORIGIN_REGEXES=^https://.*\.ngrok\.io$,^https://.*\.ngrok-free\.app$,^http://.*\.ngrok\.io$,^http://.*\.ngrok-free\.app$,^https://15b04f5013ba.ngrok-free.app
            REDIS_URL=redis://redis:6379/0
            USE_HTTPS=True
            SECURE_SSL_REDIRECT=False
            USE_DATABASE_SSL=False
            ENABLE_SECURITY_MIDDLEWARE=True
            EMAIL_BACKEND=console
            API_BASE_URL=https://15b04f5013ba.ngrok-free.app
            EOF

            # Stop existing containers
            echo "🛑 Stopping existing containers..."
            docker-compose -f docker-compose.prod.yml down --remove-orphans

            # Clean up old images to save space
            echo "🧹 Cleaning up old Docker images..."
            docker image prune -f

            # Build and start containers with nginx
            echo "🐳 Building and starting containers..."
            docker-compose -f docker-compose.prod.yml --profile with-nginx up -d --build

            # Wait for services to be healthy
            echo "⏳ Waiting for services to start..."
            sleep 60

            # Check if database is ready
            echo "🗄️ Checking database status..."
            for i in {1..30}; do
              if docker-compose -f docker-compose.prod.yml exec -T db pg_isready -U postgres; then
                echo "✅ Database is ready!"
                break
              fi
              echo "⏳ Waiting for database... ($i/30)"
              sleep 5
            done

            # Check if web service is healthy
            echo "🌐 Checking web service..."
            for i in {1..20}; do
              if docker-compose -f docker-compose.prod.yml exec -T web curl -f http://localhost:8000/health/ 2>/dev/null; then
                echo "✅ Web service is healthy!"
                break
              fi
              echo "⏳ Waiting for web service... ($i/20)"
              sleep 5
            done

            # Restart ngrok tunnel
            echo "🌐 Setting up ngrok tunnel..."
            pkill ngrok || true
            sleep 5

            # Start ngrok with your domain or let it generate one
            if [ -n "${{ secrets.NGROK_DOMAIN }}" ]; then
              nohup ngrok http 80 --authtoken=${{ secrets.NGROK_AUTH_TOKEN }} --domain=${{ secrets.NGROK_DOMAIN }} > ngrok.log 2>&1 &
            else
              nohup ngrok http 80 --authtoken=${{ secrets.NGROK_AUTH_TOKEN }} > ngrok.log 2>&1 &
            fi

            # Wait for ngrok to start
            echo "⏳ Starting ngrok tunnel..."
            sleep 15

            # Get tunnel URL
            NGROK_URL=""
            for i in {1..10}; do
              NGROK_URL=$(curl -s http://localhost:4040/api/tunnels 2>/dev/null | python3 -c "
              import sys, json
              try:
                  data = json.load(sys.stdin)
                  tunnels = data.get('tunnels', [])
                  for tunnel in tunnels:
                      if 'https' in tunnel.get('public_url', ''):
                          print(tunnel['public_url'])
                          break
              except:
                  pass
              " 2>/dev/null)
              
              if [ -n "$NGROK_URL" ]; then
                break
              fi
              echo "⏳ Waiting for ngrok URL... ($i/10)"
              sleep 3
            done

            # Show deployment status
            echo "✅ Deployment completed!"
            echo "📊 Container Status:"
            docker-compose -f docker-compose.prod.yml ps

            if [ -n "$NGROK_URL" ]; then
              echo "🌐 Application is live at: $NGROK_URL"
              echo "🏥 Health check: $NGROK_URL/health/"
              echo "👑 Admin panel: $NGROK_URL/admin/"
              
              # Final health check
              echo "🔍 Running final health check..."
              sleep 10
              if curl -f "$NGROK_URL/health/" 2>/dev/null; then
                echo "💚 Health check passed!"
              else
                echo "⚠️  Health check failed, but services are running"
              fi
            else
              echo "⚠️  Could not retrieve ngrok URL. Check logs:"
              echo "📋 Ngrok log:"
              tail -20 ngrok.log || echo "No ngrok log found"
              echo "🔍 Local health check:"
              curl -f http://localhost/health/ 2>/dev/null && echo "✅ Local health OK" || echo "❌ Local health failed"
            fi

            echo "📋 Deployment Summary:"
            echo "   - Database: PostgreSQL (local container)"
            echo "   - Cache: Redis (local container)"  
            echo "   - Web Server: Django + Gunicorn"
            echo "   - Proxy: Nginx"
            echo "   - Tunnel: Ngrok"
            echo "🎉 Deployment process completed!"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 📣 Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 NexusPolls deployed successfully!"
            echo "🌐 Check your droplet for the live URL"
            echo "📊 All services are running in Docker containers"
          else
            echo "❌ Deployment failed. Check logs for details."
            echo "🔍 Common issues to check:"
            echo "   - SSH connection to droplet"
            echo "   - Docker container build process"
            echo "   - Database connection and migrations"
            echo "   - Ngrok authentication and tunnel setup"
          fi
